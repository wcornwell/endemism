id = paste0("id_", current_knowledge_i),
name = current_knowledge,
dataLabels = list(enabled = TRUE)
)
threatened_i <- 0
for (threatened in unique(threatened_data$status)) {
threatened_val <- sum(threatened_data$count[threatened_data$status == threatened])
threatened_i <- threatened_i + 1
status_display_name <- causeName[threatened]
threatenedP <- list(
id = paste0(current_knowledgeP$id, "_", threatened_i),
name = status_display_name,
parent = current_knowledgeP$id,
value = threatened_val,
dataLabels = list(enabled = TRUE)
)
current_knowledge_val <- current_knowledge_val + threatened_val
points[[length(points) + 1]] <- threatenedP
genus_i <- 0
for (i in seq_len(nrow(threatened_data))) {
genus <- threatened_data$genus[i]
count <- threatened_data$count[i]
genusP <- list(
id = paste0(threatenedP$id, "_", genus_i),
name = genus,
parent = threatenedP$id,
value = count,
dataLabels = list(enabled = FALSE)
)
threatened_val <- threatened_val + count
points[[length(points) + 1]] <- genusP
genus_i <- genus_i + 1
}
threatenedP$value <- round(threatened_val)
}
current_knowledgeP$value <- round(current_knowledge_val)
points[[length(points) + 1]] <- current_knowledgeP
}
}
# ... (previous code)
# Create the treemap chart using highcharter
highchart() %>%
hc_chart(type = "treemap") %>%
hc_add_series(
type = "treemap",
name = "Regions",
layoutAlgorithm = "squarified",
allowDrillToNode = TRUE,
animationLimit = 1000,
dataLabels = list(
enabled = FALSE,
style = list(fontSize = "14px", fontWeight = "bold"),  # Set default font size and font weight for all levels
useHTML = TRUE
),
levels = list(
list(
level = 1,
dataLabels = list(
enabled = FALSE,
style = list(fontSize = "28px", fontWeight = "bold"),  # Set font size and font weight for level 1
allowOverlap = FALSE,
formatter = JS("function() { return this.point.name; }")
),
borderWidth = 5,        # Set the border width for level 1
borderColor = "black"   # Set the border color for level 1
),
list(
level = 2,
dataLabels = list(
enabled = FALSE  # Set dataLabels to FALSE to hide labels at level 2
)
),
list(
level = 3,
dataLabels = list(
enabled = FALSE  # Set dataLabels to FALSE to hide labels at level 3
)
)
),
point = list(
events = list(
mouseOver = JS("function() { this.graphic.toFront(); }")
)
),
accessibility = list(exposeAsGroupOnly = TRUE),
data = points
) %>%
hc_subtitle(
text = 'Click points to drill down.',
align = 'left'
) %>%
hc_title(
text = 'IUCN Redlist in Australian Endemic and Non-Endemic Plants',
align = 'left'
) %>%
hc_drilldown(
allowPointDrilldown = TRUE,
series = list(
list(id = "id_1_1", data = list(list(x = "non-endemic", y = 1))),
list(id = "id_1_2", data = list(list(x = "endemic", y = 1))),
list(id = "id_1_3", data = list(list(x = "endemic (Endangered)", y = 9))),
list(id = "id_1_4", data = list(list(x = "non-endemic (Vulnerable)", y = 10))),
list(id = "id_1_5", data = list(list(x = "non-endemic (Critically Endangered)", y = 2)))
)
)
# Load required libraries
library(highcharter)
# Load required libraries
library(highcharter)
# Sample data
current_knowledge <- c("non-endemic", "non-endemic", "endemic", "endemic", "non-endemic")
status <- c("Least.concern", "Critically.endangered", "Least.concern", "Endangered", "vulnerable")
genus <- c("Abelmoschus", "Acacia", "Acradenia", "Adenanthos", "Acacia")
count <- c(2, 2, 1, 9, 10)
# Create a vector with causeName mapping
causeName <- c(
'Least.concern' = 'Least Concern',
'Critically.endangered' = 'Critically Endangered',
'Endangered' = 'Endangered',
'vulnerable' = 'Vulnerable'
)
# Create a data frame from the sample data
data <- data.frame(
current_knowledge = current_knowledge,
status = status,
genus = genus,
count = count
)
points <- list()
current_knowledge_i <- 0
for (current_knowledge in unique(treemap_data$current_knowledge)) {
current_knowledge_data <- subset(treemap_data, current_knowledge == current_knowledge)
current_knowledge_val <- 0
current_knowledge_i <- current_knowledge_i + 1
current_knowledgeP <- list(
id = paste0("id_", current_knowledge_i),
name = current_knowledge,
color = hcl.colors(18)[current_knowledge_i]
)
threatened_i <- 0
for (threatened in unique(current_knowledge_data$status)) {
threatened_data <- subset(current_knowledge_data, status == threatened)
threatened_val <- sum(threatened_data$count)
threatened_i <- threatened_i + 1
threatenedP <- list(
id = paste0(current_knowledgeP$id, "_", threatened_i),
name = causeName[threatened],
parent = current_knowledgeP$id,
value = threatened_val
)
current_knowledge_val <- current_knowledge_val + threatened_val
points[[length(points) + 1]] <- threatenedP
genus_i <- 0
for (i in seq_len(nrow(threatened_data))) {
genus <- threatened_data$genus[i]
count <- threatened_data$count[i]
genusP <- list(
id = paste0(threatenedP$id, "_", genus_i),
name = genus,
parent = threatenedP$id,
value = count
)
threatened_val <- threatened_val + count
points[[length(points) + 1]] <- genusP
genus_i <- genus_i + 1
}
threatenedP$value <- round(threatened_val)
points[[length(points) + 1]] <- threatenedP
}
current_knowledgeP$value <- round(current_knowledge_val)
points[[length(points) + 1]] <- current_knowledgeP
}
# Create the treemap chart using highcharter
highchart() %>%
hc_chart(type = "treemap") %>%
hc_add_series(
type = "treemap",
name = "Regions",
layoutAlgorithm = "squarified",
allowDrillToNode = TRUE,
animationLimit = 1000,
dataLabels = list(enabled = FALSE),
levels = list(
list(
level = 1,
dataLabels = list(enabled = FALSE),
borderWidth = 3,
levelIsConstant = FALSE
),
list(
level = 1,
dataLabels = list(style = list(fontSize = "14px"))
),
list(
level = 2,
dataLabels = list(style = list(fontSize = "12px"))
)
),
accessibility = list(exposeAsGroupOnly = TRUE),
data = points
) %>%
hc_subtitle(
text = 'Click points to drill down.',
align = 'left'
) %>%
hc_title(
text = 'IUCN Redlist in Australian Endemic and Non-Endemic Plants',
align = 'left'
)
# Create the treemap chart using highcharter
highchart() %>%
hc_chart(type = "treemap") %>%
hc_add_series(
type = "treemap",
name = "Regions",
layoutAlgorithm = "squarified",
allowDrillToNode = TRUE,
animationLimit = 1000,
dataLabels = list(enabled = FALSE),
levels = list(
list(
level = 1,
dataLabels = list(enabled = TRUE),
borderWidth = 3,
levelIsConstant = FALSE
),
list(
level = 1,
dataLabels = list(style = list(fontSize = "14px"))
),
list(
level = 2,
dataLabels = list(style = list(fontSize = "12px"))
)
),
accessibility = list(exposeAsGroupOnly = TRUE),
data = points
) %>%
hc_subtitle(
text = 'Click points to drill down.',
align = 'left'
) %>%
hc_title(
text = 'IUCN Redlist in Australian Endemic and Non-Endemic Plants',
align = 'left'
)
causeName <- c('Least.Concern' = 'Least Concern',
'Critically.Endangered' = 'Critically Endangered',
'Endangered' = 'Endangered',
'vulnerable' = 'Vulnerable'
)
points <- list()
current_knowledge_i <- 0
for (current_knowledge in unique(treemap_data$current_knowledge)) {
current_knowledge_data <- treemap_data[treemap_data$current_knowledge == current_knowledge, ]
current_knowledge_val <- 0
current_knowledge_i <- current_knowledge_i + 1
# Only add the first-level categories to the treemap
if (current_knowledge == "endemic" || current_knowledge == "non-endemic") {
current_knowledgeP <- list(
id = paste0("id_", current_knowledge_i),
name = current_knowledge,
color = ifelse(current_knowledge == "endemic", "lightblue", "darkblue"),
dataLabels = list(enabled = TRUE)
)
threatened_i <- 0
for (threatened in unique(current_knowledge_data$status)) {
threatened_data <- current_knowledge_data[current_knowledge_data$status == threatened, ]
threatened_val <- sum(threatened_data$count)
threatened_i <- threatened_i + 1
status_display_name <- causeName[threatened]
threatenedP <- list(
id = paste0(current_knowledgeP$id, "_", threatened_i),
name = status_display_name,
parent = current_knowledgeP$id,
value = threatened_val,
dataLabels = list(enabled = TRUE)
)
current_knowledge_val <- current_knowledge_val + threatened_val
points[[length(points) + 1]] <- threatenedP
genus_i <- 0
for (i in seq_len(nrow(threatened_data))) {
genus <- threatened_data$genus[i]
count <- threatened_data$count[i]
genusP <- list(
id = paste0(threatenedP$id, "_", genus_i),
name = genus,
parent = threatenedP$id,
value = count,
dataLabels = list(enabled = FALSE)
)
threatened_val <- threatened_val + count
points[[length(points) + 1]] <- genusP
genus_i <- genus_i + 1
}
threatenedP$value <- round(threatened_val)
}
current_knowledgeP$value <- round(current_knowledge_val)
points[[length(points) + 1]] <- current_knowledgeP
} else {
# If it's not a first-level category, just add it as a separate data point at the second level
threatened_data <- current_knowledge_data  # Use the data directly, as it's already at the second level
current_knowledgeP <- list(
id = paste0("id_", current_knowledge_i),
name = current_knowledge,
dataLabels = list(enabled = TRUE)
)
threatened_i <- 0
for (threatened in unique(threatened_data$status)) {
threatened_val <- sum(threatened_data$count[threatened_data$status == threatened])
threatened_i <- threatened_i + 1
status_display_name <- causeName[threatened]
threatenedP <- list(
id = paste0(current_knowledgeP$id, "_", threatened_i),
name = status_display_name,
parent = current_knowledgeP$id,
value = threatened_val,
dataLabels = list(enabled = TRUE)
)
current_knowledge_val <- current_knowledge_val + threatened_val
points[[length(points) + 1]] <- threatenedP
genus_i <- 0
for (i in seq_len(nrow(threatened_data))) {
genus <- threatened_data$genus[i]
count <- threatened_data$count[i]
genusP <- list(
id = paste0(threatenedP$id, "_", genus_i),
name = genus,
parent = threatenedP$id,
value = count,
dataLabels = list(enabled = FALSE)
)
threatened_val <- threatened_val + count
points[[length(points) + 1]] <- genusP
genus_i <- genus_i + 1
}
threatenedP$value <- round(threatened_val)
}
current_knowledgeP$value <- round(current_knowledge_val)
points[[length(points) + 1]] <- current_knowledgeP
}
}
# ... (previous code)
# Create the treemap chart using highcharter
highchart() %>%
hc_chart(type = "treemap") %>%
hc_add_series(
type = "treemap",
name = "Regions",
layoutAlgorithm = "squarified",
allowDrillToNode = TRUE,
animationLimit = 1000,
dataLabels = list(enabled = FALSE),
levels = list(
list(
level = 1,
dataLabels = list(enabled = TRUE),
borderWidth = 3,
levelIsConstant = FALSE
),
list(
level = 1,
dataLabels = list(style = list(fontSize = "14px"))
),
list(
level = 2,
dataLabels = list(style = list(fontSize = "12px"))
)
),
accessibility = list(exposeAsGroupOnly = TRUE),
data = points
) %>%
hc_subtitle(
text = 'Click points to drill down.',
align = 'left'
) %>%
hc_title(
text = 'IUCN Redlist in Australian Endemic and Non-Endemic Plants',
align = 'left'
)
# Create the treemap chart using highcharter
highchart() %>%
hc_chart(type = "treemap") %>%
hc_add_series(
type = "treemap",
name = "Regions",
layoutAlgorithm = "squarified",
allowDrillToNode = TRUE,
animationLimit = 1000,
dataLabels = list(enabled = TRUE),
levels = list(
list(
level = 1,
dataLabels = list(enabled = TRUE),
borderWidth = 3,
levelIsConstant = FALSE
),
list(
level = 1,
dataLabels = list(style = list(fontSize = "14px"))
),
list(
level = 2,
dataLabels = list(style = list(fontSize = "12px"))
)
),
accessibility = list(exposeAsGroupOnly = TRUE),
data = points
) %>%
hc_subtitle(
text = 'Click points to drill down.',
align = 'left'
) %>%
hc_title(
text = 'IUCN Redlist in Australian Endemic and Non-Endemic Plants',
align = 'left'
)
ards(d3tree2())
ards(d3tree2
ards(d3tree2)
args(d3tree2)
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = "Test")
TS.treemap <- treemap(treemap_data,
index=c("current_knowledge","status", "genus"),
vSize="count",
vColor = "current_knowledge",
type="index",
palette = "Set1",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("centre", "centre")
)
)
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = "Test")
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera")
args(d3tree2)
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = c("name", "status")
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = c("name", "status"))
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = c("name", "status"))
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = c("name", "status", "Test"))
c("Vulnerable"))
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = list(
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = list(
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = list(
c("Endemic", "Non-Endemic"),
c("Vulnerable")))
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = list(
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", celltext = list(
c("Endemic", "Non-Endemic"),
c("Vulnerable")))
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera")
args(d3tree2)
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", clickAction = TRUE)
hc_exporting(enabled = TRUE)) # enable export
hctreemap(TS.treemap, allowDrillToNode = T) %>%
hc_title(text = "Threatened Status of Australian Native Plant Genera") %>%
hc_tooltip(pointFormat = "<b>{point.name}</b>:<br>
Pop: {point.value:,.0f}<br>
GNI: {point.valuecolor:,.0f}")
customClickAction <- 'function(d) {
# Function call with custom click action
d3tree2(
data = TS.treemap,
rootname = "Threatened Status of Australian Native Plant Genera",
clickAction = customClickAction
)
# Function call with custom click action
d3tree2(
data = TS.treemap,
rootname = "Threatened Status of Australian Native Plant Genera",
clickAction = customClickAction
)
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", clickAction = TRUE)
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", clickAction = TRUE)
d3tree2(TS.treemap, rootname = "Threatened Status of Australian Native Plant Genera", clickAction = TRUE)
TS.treemap <- treemap(treemap_data,
index=c("current_knowledge","status", "genus"),
vSize="count",
vColor = "current_knowledge",
type="index",
palette = "Set1",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("centre", "centre")
)
)
TS.treemap <- treemap(treemap_data,
index=c("current_knowledge","status", "genus"),
vSize="count",
vColor = "current_knowledge",
type="index",
palette = "Set1",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("centre", "centre")
)
)
TS.treemap <- treemap(treemap_data,
index=c("current_knowledge","status", "genus"),
vSize="count",
vColor = "current_knowledge",
type="index",
palette = "Set1",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("centre", "centre")
)
)
