write.csv(summary_final, file = 'intermediate_data/summary_current.csv', row.names = FALSE)
summary_traits <- read_csv('intermediate_date/summary_with_traits.csv')
summary_traits <- read_csv('intermediate_data/summary_with_traits.csv')
View(summary_traits)
all_aus_gen <- read_csv('data/australian_flora/genus_level_estimate.csv')
all_aus_gen <- read_csv('data/australian_flora/genus_level_endemism_estimate.csv')
View(all_aus_gen)
View(summary_traits)
colnames(summary_traits)
all_aus_gen$nz <- NA
all_aus_gen$nc <- NA
all_aus_gen$ng <- NA
all_aus_gen$wcvp <- NA
all_aus_gen$indo2 <- NA
all_aus_gen$prop_aus <- NA
all_aus_gen$n <- NA
all_aus_gen$ala <- NA
all_aus_gen$rowsums <- NA
all_aus_gen$current_knowledge <- NA
all_aus_gen$reason <- NA
redlist <- redlist %>%
filter(genusName %in% all_aus_gen$genus) #Filters redlist data to only include genera within fivesource data
redlist <- read.csv(file = "data/REDLIST_Folder/simple_summary.csv", header = T)
redlist <- redlist %>%
filter(genusName %in% all_aus_gen$genus) #Filters redlist data to only include genera within fivesource data
unique(redlist$redlistCategory)
unique(redlist$genusName) #`182 genera`
counts <- redlist %>% #Creating counts frame for each threatened status
group_by(genusName) %>%
count(redlistCategory) %>%
pivot_wider(names_from = redlistCategory, values_from = n, values_fill = NA)
all_aus_gen$genus %in% summary_traits$genus
dupes <- all_aus_gen$genus %in% summary_traits$genus
#remove dupes from summary_traits df because we are going to join them later
all_aus_gen <- all_aus_gen[!(all_aus_gen$genus %in% summary_traits$genus), ]
redlist <- redlist %>%
filter(genusName %in% all_aus_gen$genus) #Filters redlist data to only include genera within fivesource data
unique(redlist$genusName) #`182 genera`
counts <- redlist %>% #Creating counts frame for each threatened status
group_by(genusName) %>%
count(redlistCategory) %>%
pivot_wider(names_from = redlistCategory, values_from = n, values_fill = NA)
# Join the counts with fivesource.trial based on genera2
genus_with_status <- all_aus_gen %>%
left_join(counts, by = c("genus" = "genusName")) %>% #Lower Risk/ Near Threatened has one value - Maybe combine with Near Threatened?
mutate_at(c(15:22), ~replace_na(.,0))
View(genus_with_status)
View(summary_final)
View(summary_final)
View(summary_traits)
# Join the counts with all_aud_gen based on genera2
all_aus_gen <- all_aus_gen %>%
left_join(counts, by = c("genus" = "genusName")) %>% #Lower Risk/ Near Threatened has one value - Maybe combine with Near Threatened?
mutate_at(c(15:22), ~replace_na(.,0))
View(all_aus_gen)
all_aus_gen$current_knowledge <- 'non-endemic'
summary <- read_csv('intermediate_data/summary_current.csv')
#make genus_list of genera included in our summary table
genus_list <- summary$genus
#load austraits
devtools::install_github("traitecoevo/austraits")
#load austraits
devtools::install_github("traitecoevo/austraits")
austraits <- load_austraits(version = "4.1.0", path = "intro/downloads")
library(austraits)
austraits <- load_austraits(version = "4.1.0", path = "intro/downloads")
austraits <- load_austraits(version = "4.1.0", path = "intro/downloads")
austraits_joined <- left_join(austraits[["traits"]], austraits[["taxa"]], by = "taxon_name")
#remove dupes from summary_traits df because we are going to join them later
non_end_gen <- all_aus_gen[!(all_aus_gen$genus %in% summary_traits$genus), ]
redlist <- redlist %>%
filter(genusName %in% non_end_gen$genus) #Filters redlist data to only include genera within fivesource data
unique(redlist$genusName) #325 genera`
counts <- redlist %>% #Creating counts frame for each threatened status
group_by(genusName) %>%
count(redlistCategory) %>%
pivot_wider(names_from = redlistCategory, values_from = n, values_fill = NA)
# Join the counts with all_aud_gen based on genera2
non_end_gen <- non_end_gen %>%
left_join(counts, by = c("genus" = "genusName")) %>% #Lower Risk/ Near Threatened has one value - Maybe combine with Near Threatened?
mutate_at(c(15:22), ~replace_na(.,0))
View(non_end_gen)
```{r}
all_aus_gen <- read_csv('data/australian_flora/genus_level_endemism_estimate.csv')
colnames(summary_traits)
all_aus_gen$nz <- NA
all_aus_gen$nc <- NA
all_aus_gen$ng <- NA
all_aus_gen$wcvp <- NA
all_aus_gen$indo2 <- NA
all_aus_gen$prop_aus <- NA
all_aus_gen$n <- NA
all_aus_gen$ala <- NA
all_aus_gen$rowsums <- NA
all_aus_gen$current_knowledge <- 'non-endemic'
all_aus_gen$reason <- NA
#remove dupes from summary_traits df because we are going to join them later
non_end_gen <- all_aus_gen[!(all_aus_gen$genus %in% summary_traits$genus), ]
redlist <- redlist %>%
filter(genusName %in% non_end_gen$genus) #Filters redlist data to only include genera within fivesource data
counts <- redlist %>% #Creating counts frame for each threatened status
group_by(genusName) %>%
count(redlistCategory) %>%
pivot_wider(names_from = redlistCategory, values_from = n, values_fill = NA)
# Join the counts with all_aud_gen based on genera2
non_end_gen <- non_end_gen %>%
left_join(counts, by = c("genus" = "genusName")) %>% #Lower Risk/ Near Threatened has one value - Maybe combine with Near Threatened?
mutate_at(c(15:22), ~replace_na(.,0))
non_end_genera_list <- non_end_gen$genus
#find our genera in austraits list
genus_austraits2 <- austraits_joined[grepl(paste(non_end_genera_list, collapse = "|"), austraits_joined$taxon_name), ]
#make genera list where all traits for species in one genera are compiled
non_end_austraits_genera <- austraits_species %>%
select(genus, trait_name, value) %>%
pivot_wider(names_from = trait_name, values_from = value)
#extract species list from this because species names are the format they are stored in austraits data
non_end_species_list <- unique(genus_austraits2$taxon_name)
#make df with species from species_list
non_end_austraits_species <- austraits$traits %>%
filter(taxon_name %in% non_end_species_list)
#add genus column from first word of taxon_name
non_end_austraits_species <- non_end_austraits_species %>%
mutate(genus = word(taxon_name, 1))
#add genus column from first word of taxon_name
non_end_austraits_species <- non_end_austraits_species %>%
mutate(genus = word(taxon_name, 1))
#make genera list where all traits for species in one genera are compiled
non_end_austraits_genera <- austraits_species %>%
select(genus, trait_name, value) %>%
pivot_wider(names_from = trait_name, values_from = value)
#make genera list where all traits for species in one genera are compiled
non_end_austraits_genera <- non_end_austraits_species %>%
select(genus, trait_name, value) %>%
pivot_wider(names_from = trait_name, values_from = value)
#join to summary list
ne_summary <- left_join(non_end_gen, non_end_austraits_genera, by = 'genus')
#austraits_genera df had 1080 items, but genus_list has 1063?
genus_in_ausgen <- non_end_austraits_genera$genus
non_matching <- genus_in_ausgen[!(genus_in_ausgen %in% ne_summary$genus)]
print(non_matching) #there are 19 - maybe thats fine? they include orchidaceae and eucalyptus?
View(ne_summary)
View(summary_traits)
write.csv(summary_traits, 'intermediate_data/summary_with_traits.csv', row.names = F)
summary_traits <- summary_traits[, -1]
View(summary_traits)
colnames(ne_summary)
View(summary_traits)
which(colnames(ne_summary) == "seed_dry_mass")
which(colnames(ne_summary) == "dispersal_appendage")
which(colnames(ne_summary) == "dispersal_method")
which(colnames(ne_summary) == "dispersal_method")
View(summary_traits)
which(colnames(ne_summary) == "dispersal_syndrome")
ne_summary_traits <- ne_summary[, c(1:22,26,37,52,56)]
View(ne_summary_traits)
View(summary_traits)
all_aus_gen <- rbind(summary_traits, ne_summary_traits)
View(summary_traits)
non_matching <- colnames(summary_traits)[!(colnames(summary_traits) %in% colnames(ne_summary_traits))]
summary_traits <- summary_traits[, -22]
all_aus_gen <- rbind(summary_traits, ne_summary_traits)
#extinct is in summary_traits but not in ne_summary_traits - have removed for this process but we can add if needed
non_matching <- colnames(summary_traits)[!(colnames(summary_traits) %in% colnames(ne_summary_traits))]
colnames(summary_traits)
colnames(ne_summary_traits)
colnames(sumary_traits)[22] <- 'Lower Risk/conservation dependent'
colnames(summary_traits)[22] <- 'Lower Risk/conservation dependent'
all_aus_gen <- rbind(summary_traits, ne_summary_traits)
colnames(ne_summary_traits)
austraits_joined <- left_join(austraits[["traits"]], austraits[["taxa"]], by = "taxon_name")
non_end_genera_list <- non_end_gen$genus
#find our genera in austraits list
genus_austraits2 <- austraits_joined[grepl(paste(non_end_genera_list, collapse = "|"), austraits_joined$taxon_name), ]
#extract species list from this because species names are the format they are stored in austraits data
non_end_species_list <- unique(genus_austraits2$taxon_name)
#make df with species from species_list
non_end_austraits_species <- austraits$traits %>%
filter(taxon_name %in% non_end_species_list)
#add genus column from first word of taxon_name
non_end_austraits_species <- non_end_austraits_species %>%
mutate(genus = word(taxon_name, 1))
#make genera list where all traits for species in one genera are compiled
non_end_austraits_genera <- non_end_austraits_species %>%
select(genus, trait_name, value) %>%
pivot_wider(names_from = trait_name, values_from = value)
#join to summary list
ne_summary <- left_join(non_end_gen, non_end_austraits_genera, by = 'genus')
#austraits_genera df had 1080 items, but genus_list has 1063?
genus_in_ausgen <- non_end_austraits_genera$genus
non_matching <- genus_in_ausgen[!(genus_in_ausgen %in% ne_summary$genus)]
print(non_matching) #there are 18 - ???
#we only want growth form and dispersal traits, so have included dispersal appendage, method, growth form, and seed mass as there was lots of data on that and its relevant to dispesion - and pretty sure there a 2006 cornwell paper somewhere about that...
which(colnames(ne_summary) == "dispersal_syndrome")
ne_summary_traits <- ne_summary[, c(1:22,26,37,52,56)]
all_aus_gen <- rbind(summary_traits, ne_summary_traits)
redlist <- redlist %>%
filter(genusName %in% fivesource$genus) #Filters redlist data to only include genera within fivesource data
redlist <- read.csv(file = "data/REDLIST_Folder/simple_summary.csv", header = T)
fivesource <- read.csv(file = "intermediate_data/summary_current.csv", header = T) #Contains outside Aus proportions and endemicity estimates
redlist <- redlist %>%
filter(genusName %in% fivesource$genus) #Filters redlist data to only include genera within fivesource data
unique(redlist$redlistCategory)
print(redlist[redlist$redlistCategory == "Extinct", ]) #Is Extinct required, should remove?
unique(redlist$genusName) #`182 genera`
counts <- redlist %>% #Creating counts frame for each threatened status
group_by(genusName) %>%
count(redlistCategory) %>%
pivot_wider(names_from = redlistCategory, values_from = n, values_fill = NA)
# Join the counts with fivesource.trial based on genera2
genus_with_status <- fivesource %>%
left_join(counts, by = c("genus" = "genusName")) %>% #Lower Risk/ Near Threatened has one value - Maybe combine with Near Threatened?
mutate_at(c(15:22), ~replace_na(.,0))
View(genus_with_status)
all_aus_gen <- read_csv('data/australian_flora/genus_level_endemism_estimate.csv')
all_aus_gen$nz <- NA
all_aus_gen$nc <- NA
all_aus_gen$ng <- NA
all_aus_gen$wcvp <- NA
all_aus_gen$indo2 <- NA
all_aus_gen$prop_aus <- NA
all_aus_gen$n <- NA
all_aus_gen$ala <- NA
all_aus_gen$rowsums <- NA
all_aus_gen$current_knowledge <- 'non-endemic'
all_aus_gen$reason <- NA
View(all_aus_gen)
View(summary)
#remove dupes from summary_traits df because we are going to join them later
non_end_gen <- all_aus_gen[!(all_aus_gen$genus %in% summary_traits$genus), ]
redlist <- redlist %>%
filter(genusName %in% non_end_gen$genus) #Filters redlist data to only include genera within fivesource data
unique(redlist$redlistCategory)
unique(redlist$redlistCategory)
redlist <- redlist %>%
filter(genusName %in% non_end_gen$genus) #Filters redlist data to only include genera within fivesource data
View(non_end_gen)
redlist <- read.csv(file = "data/REDLIST_Folder/simple_summary.csv", header = T)
redlist <- redlist %>%
filter(genusName %in% non_end_gen$genus) #Filters redlist data to only include genera within fivesource data
unique(redlist$redlistCategory)
View(genus_with_status)
print(redlist[redlist$redlistCategory == "Extinct", ]) #Is Extinct required, should remove?
View(redlist)
counts <- redlist %>% #Creating counts frame for each threatened status
group_by(genusName) %>%
count(redlistCategory) %>%
pivot_wider(names_from = redlistCategory, values_from = n, values_fill = NA)
# Join the counts with all_aud_gen based on genera2
non_end_gen <- non_end_gen %>%
left_join(counts, by = c("genus" = "genusName")) %>% #Lower Risk/ Near Threatened has one value - Maybe combine with Near Threatened?
mutate_at(c(15:22), ~replace_na(.,0))
#remove dupes from summary_traits df because we are going to join them later
non_end_gen <- all_aus_gen[!(all_aus_gen$genus %in% summary_traits$genus), ]
# Join the counts with all_aud_gen based on genera2
non_end_gen <- non_end_gen %>%
left_join(counts, by = c("genus" = "genusName")) %>% #Lower Risk/ Near Threatened has one value - Maybe combine with Near Threatened?
mutate_at(c(15:23), ~replace_na(.,0))
View(non_end_gen)
#extinct is in summary_traits but not in ne_summary_traits - have removed for this process but we can add if needed
non_matching <- colnames(summary_traits)[!(colnames(summary_traits) %in% colnames(ne_summary_traits))]
ne_summary_traits <- ne_summary[, c(1:22,26,37,52,56)]
View(ne_summary_traits)
View(summary_traits)
View(ne_summary)
ne_summary_traits <- ne_summary[, c(1:23,27,38,53,57)]
View(ne_summary_traits)
ne_summary_traits <- ne_summary[, c(1:23,26,37,52,56)]
points <- read.csv('"C:/Users/adele/Documents/BEES3041/endemism/endemism/data/endemic_locations/locations_endemic_genera_v2.csv')
points <- read.csv('C:/Users/adele/Documents/BEES3041/endemism/endemism/data/endemic_locations/locations_endemic_genera_v2.csv')
points <- read.csv('C:/Users/adele/Documents/BEES3041/endemism/endemism/data/endemic_locations/locations_endemic_genera_v2.csv')
View(points)
library(rayshader)  # For 3d rendering
library(tidyverse)  # Data wrangling
library(here)       # Safe paths
library(sf)         # Spatial features
library(ozmaps)     # For map of oz
install.packages('rayshader')
library(rayshader)  # For 3d rendering
oz_wgs84 <- ozmap_data(data = "country") |>
st_transform(crs = st_crs("WGS84"))
## check map
ggplot(oz_wgs84) + geom_sf()
#create grid
oz_grid <- st_make_grid(oz_wgs84,
what = "polygons",
cellsize = 1.0,
square = FALSE,
flat_topped = TRUE)
# subset to grid cells that are within land
keep_hexes <- st_intersects(oz_grid, oz_wgs84)
keep_hexes <- as.data.frame(keep_hexes)$row.id
oz_grid <- oz_grid[keep_hexes]
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
View(oz_grid)
#remove norfolk and cocos keeling
oz_grid <- st_crop(oz_grid, xmin = 110, xmax = 160)
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
#remove norfolk and cocos keeling
oz_grid <- st_crop(oz_grid, xmin = 110, xmax = 160)
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
??st_intersects
??sf
??st_filter
View(oz_wgs84)
# Define a polygon representing the limited area (e.g., longitude range 110 to 160, latitude range -45 to -10)
limited_area <- st_bbox(c(xmin = 110, ymin = -45, xmax = 160, ymax = -10), crs = st_crs("WGS84"))
# Filter the grid cells based on the limited area
oz_grid <- st_intersection(oz_grid, limited_area)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("rayshader")
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
# Filter the grid cells based on the limited area
oz_grid <- st_intersection(oz_grid, limited_area)
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
keep_hexes <- st_intersects(oz_grid, oz_wgs84, limited_area)
keep_hexes <- st_intersects(oz_grid, oz_wgs84, limited_area)
keep_hexes <- ?st_contains()
?st_contains
keep_hexes <- st_contains(oz_grid, limited_area)
keep_hexes <- st_contains(oz_grid, limited_area)
keep_hexes <- as.data.frame(keep_hexes)$row.id
keep_hexes <- st_intersects(oz_grid, oz_wgs84)
keep_hexes <- as.data.frame(keep_hexes)$row.id
oz_grid <- oz_grid[keep_hexes]
# Define a polygon representing the limited area (e.g., longitude range 110 to 160, latitude range -45 to -10)
limited_area <- st_bbox(c(xmin = 110, ymin = -45, xmax = 160, ymax = -10), crs = st_crs("WGS84"))
keep_hexes <- st_contains(oz_grid, limited_area)
# Filter the grid cells based on the limited area
oz_grid <- st_intersection(oz_grid, limited_area)
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
?get_counts
install.packages('galah')
library(galah)
install.packages('galah')
install.packages('galah')
library(galah)
?galah::get_counts
??galah::get_counts
??get_counts
View(points)
get_counts <- function(hexagon){
# convert to wkt
wkt_string <- st_as_text(oz_grid[[hexagon]]) %>%
sub(")))", "))", .) %>%
sub("POLYGON ", "POLYGON", .)
# get counts
result <- galah_call() |>
galah_geolocate(wkt_string) |>
galah_identify("plantae", "chlorophyta") |>
galah_filter(decimalLongitude > 110,
year >= 2020) |>
galah_apply_profile(ALA) |>
atlas_counts(type = "species", # get species counts
limit = NULL)
# light formatting to catch errors
if(is.null(result)){
tibble(count = NA, id = hexagon)
}else{
result$id <- hexagon
result
}
}
get_counts <- function(hexagon){
# convert to wkt
wkt_string <- st_as_text(oz_grid[[hexagon]]) %>%
sub(")))", "))", .) %>%
sub("POLYGON ", "POLYGON", .)
# get counts
result <- galah_call() |>
galah_geolocate(wkt_string) |>
galah_identify("plantae", "chlorophyta") |>
galah_filter(decimalLongitude > 110,
year >= 2020) |>
galah_apply_profile(ALA) |>
atlas_counts(type = "species", # get species counts
limit = NULL)
# light formatting to catch errors
if(is.null(result)){
tibble(count = NA, id = hexagon)
}else{
result$id <- hexagon
result
}
}
# download number of species for each polygon
counts_list <- map(seq_along(oz_grid), get_counts)
points <- read.csv('C:/Users/adele/Documents/BEES3041/endemism/endemism/data/endemic_locations/locations_endemic_genera_v2.csv')
library(rayshader)  # For 3d rendering
library(tidyverse)  # Data wrangling
library(here)       # Safe paths
library(sf)         # Spatial features
library(ozmaps)     # For map of oz
install.packages('galah')
library(galah)
oz_wgs84 <- ozmap_data(data = "country") |>
st_transform(crs = st_crs("WGS84"))
## check map
ggplot(oz_wgs84) + geom_sf()
#create grid
oz_grid <- st_make_grid(oz_wgs84,
what = "polygons",
cellsize = 1.0,
square = FALSE,
flat_topped = TRUE)
# subset to grid cells that are within land
keep_hexes <- st_intersects(oz_grid, oz_wgs84)
# Define a polygon representing the limited area (e.g., longitude range 110 to 160, latitude range -45 to -10)
limited_area <- st_bbox(c(xmin = 110, ymin = -45, xmax = 160, ymax = -10), crs = st_crs("WGS84"))
keep_hexes <- st_within(limited_area)
keep_hexes <- as.data.frame(keep_hexes)$row.id
oz_grid <- oz_grid[keep_hexes]
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
keep_hexes <- st_within(limited_area)
keep_hexes <- as.data.frame(keep_hexes)$row.id
oz_grid <- oz_grid[keep_hexes]
# Define a polygon representing the limited area (e.g., longitude range 110 to 160, latitude range -45 to -10)
limited_area <- st_geometry(c(xmin = 110, ymin = -45, xmax = 160, ymax = -10), crs = st_crs("WGS84"))
# subset to grid cells that are within land
keep_hexes <- st_intersects(oz_grid, oz_wgs84, limited_area)
keep_hexes <- as.data.frame(keep_hexes)$row.id
oz_grid <- oz_grid[keep_hexes]
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
# subset to grid cells that are within land
keep_hexes <- st_intersects(oz_grid, oz_wgs84)
keep_hexes <- as.data.frame(keep_hexes)$row.id
oz_grid <- oz_grid[keep_hexes]
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
#create grid
oz_grid <- st_make_grid(oz_wgs84,
what = "polygons",
cellsize = 1.0,
square = FALSE,
flat_topped = TRUE)
# subset to grid cells that are within land
keep_hexes <- st_intersects(oz_grid, oz_wgs84)
keep_hexes <- as.data.frame(keep_hexes)$row.id
oz_grid <- oz_grid[keep_hexes]
ggplot() +
geom_sf(data = oz_wgs84) +
geom_sf(data = oz_grid, fill = NA, color = "red")
get_counts <- function(hexagon){
# convert to wkt
wkt_string <- st_as_text(oz_grid[[hexagon]]) %>%
sub(")))", "))", .) %>%
sub("POLYGON ", "POLYGON", .)
# get counts
result <- galah_call() |>
galah_geolocate(wkt_string) |>
galah_identify("plantae", "chlorophyta") |>
galah_filter(decimalLongitude > 110,
year >= 2020) |>
galah_apply_profile(ALA) |>
atlas_counts(type = "species", # get species counts
limit = NULL)
# light formatting to catch errors
if(is.null(result)){
tibble(count = NA, id = hexagon)
}else{
result$id <- hexagon
result
}
}
# download number of species for each polygon
counts_list <- map(seq_along(oz_grid), get_counts)
# download number of species for each polygon
counts_list <- map(seq_along(oz_grid), get_counts)
grid_all <- st_make_grid(aus,
cellsize = 1,
what = "polygons",
square = FALSE,
flat_topped = TRUE)
aus <- st_transform(ozmaps::ozmap_country, 4326)
grid_all <- st_make_grid(aus,
cellsize = 1,
what = "polygons",
square = FALSE,
flat_topped = TRUE)
keep_hexes <- st_intersects(grid_all, aus) %>%
as.data.frame(.) %>%
pull(row.id)
# filter full grid to only hexagon IDs in AUS
oz_grid <- grid_all[keep_hexes]
ggplot() + geom_sf(data = oz_grid)
ggplot() +
geom_sf(data = aus) +
geom_sf(data = oz_grid, fill = NA, color = "red")
ggplot() + geom_sf(data = oz_grid)
ggplot() + geom_sf(data = oz_grid)
species_points_sf <- points %>%
st_as_sf(coords = c("decimalLongitude", "decimalLatitude"),
crs = st_crs(4326))
intersect <- st_intersects(species_points_sf, oz_grid)
View(intersect)
intersect[5:10]
