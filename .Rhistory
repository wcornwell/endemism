# Create a SpatialPolygons object for Australia
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names,
proj4string = CRS("+proj=longlat +datum=WGS84"))
# Create a SpatialPoints object for the given point
point <- SpatialPoints(matrix(c(x, y), ncol = 2))
# Check if the point is inside Australia
inside <- point.in.polygon(point, australia_polygon)
# Return TRUE if the point is inside Australia, otherwise FALSE
return(inside)
}
# Test the function with sample points
points <- data.frame(x = c(130, 145, 160), y = c(-25, -30, -35))
for (i in 1:nrow(points)) {
inside_australia <- is_point_inside_australia(points$x[i], points$y[i])
if (inside_australia) {
cat("Point", i, "is inside Australia\n")
} else {
cat("Point", i, "is outside Australia\n")
}
}
# Define the XY points
points <- data.frame(x = c(151, 150, 100), y = c(-33, 125, -20))
# Check if points fall within australia_polygon
within_polygon <- sapply(1:nrow(points), function(i) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2])
})
# Print the result
within_polygon
View(australia_polygon)
# Print the result
within_polygon
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names, proj4string = CRS("+proj=longlat +datum=WGS84"))
# Define the XY points
points <- data.frame(x = c(151, 150, 100), y = c(-33, 125, -20))
# Check if points fall within australia_polygon
within_polygon <- sapply(1:nrow(points), function(i) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2])
})
# Print the result
within_polygon
View(australia_map)
View(australia_polygon)
library(ggplot2)
library(ggplot2)
# Create a data frame with the x and y coordinates of the polygon
polygon_data <- data.frame(x = australia_polygon@polygons[[1]]@Polygons[[1]]@coords[, 1],
y = australia_polygon@polygons[[1]]@Polygons[[1]]@coords[, 2])
# Create the map using ggplot2
ggplot(polygon_data, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
# Create a data frame with the x and y coordinates of the polygon
polygon_data <- data.frame(x = australia_polygon@polygons[[2]]@Polygons[[1]]@coords[, 1],
y = australia_polygon@polygons[[2]]@Polygons[[1]]@coords[, 2])
# Create the map using ggplot2
ggplot(polygon_data, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]:polygons[[43]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2])
# check if points fall within australia_polygon
within_polygon <- sapply(1:nrow(points), function(i) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2],
australia_polygon@polygons[[2]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[2]]@Polygons[[1]]@coords[,2]                   )
})
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2],
australia_polygon@polygons[[2]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[2]]@Polygons[[1]]@coords[,2])                   )
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2],
australia_polygon@polygons[[2]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[2]]@Polygons[[1]]@coords[,2]                   )
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2],                  )
australia_all <- australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2], australia_polygon@polygons[[2]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[2]]@Polygons[[1]]@coords[,2]
australia_all <- australia_polygon@polygons[[1]]@Polygons[[1]], australia_polygon@polygons[[2]]@Polygons[[1]]
australia_all <- australia_polygon@polygons[[1]]@Polygons[[1]], australia_polygon@polygons[[2]]@Polygons[[1]]
# Create a logical vector to store the results for each point
within_polygon <- logical(nrow(points))
# Iterate over each polygon
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})
within_polygon
australia_all <- rbind(australia_polygon@polygons[[1]]@Polygons[[1]]@coords,
australia_polygon@polygons[[2]]@Polygons[[1]]@coords,
australia_polygon@polygons[[3]]@Polygons[[1]]@coords,
australia_polygon@polygons[[4]]@Polygons[[1]]@coords,
australia_polygon@polygons[[5]]@Polygons[[1]]@coords,
australia_polygon@polygons[[6]]@Polygons[[1]]@coords)
View(australia_all)
australia_all <- rbind(australia_polygon@polygons[[1]]@Polygons[[1]],
australia_polygon@polygons[[2]]@Polygons[[1]],
australia_polygon@polygons[[3]]@Polygons[[1]],
australia_polygon@polygons[[4]]@Polygons[[1]],
australia_polygon@polygons[[5]]@Polygons[[1]],
australia_polygon@polygons[[6]]@Polygons[[1]])
australia_all <- rbind(australia_polygon@polygons[[1]]@Polygons[[1]],
australia_polygon@polygons[[2]]@Polygons[[1]],
australia_polygon@polygons[[3]]@Polygons[[1]],
australia_polygon@polygons[[4]]@Polygons[[1]],
australia_polygon@polygons[[5]]@Polygons[[1]],
australia_polygon@polygons[[6]]@Polygons[[1]])
australia_all <- rbind(australia_polygon@polygons[[1]],
australia_polygon@polygons[[2]])
australia_all <- rbind(australia_polygon@polygons[[1]]@Polygons[[1]]@coords,
australia_polygon@polygons[[2]]@Polygons[[1]]@coords,
australia_polygon@polygons[[3]]@Polygons[[1]]@coords,
australia_polygon@polygons[[4]]@Polygons[[1]]@coords,
australia_polygon@polygons[[5]]@Polygons[[1]]@coords,
australia_polygon@polygons[[6]]@Polygons[[1]]@coords)
ggplot(australia_all aes(x = V1, y = V2)) +
ggplot(australia_all aes(x = 'V1', y = 'V2')) +
ggplot(australia_all aes(x = x, y = y)) +
ggplot(australia_all, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
ggplot(australia_all, aes(x = 'v1', y = 'v2)) +
ggplot(australia_all, aes(x = 'v1', y = 'v2')) +
()
ggplot(australia_all, aes(x = 'v1', y = 'v2')) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
combined_polygon <- rbind(australia_polygon@polygons[[1]]@Polygons[[1]]@coords,
australia_polygon@polygons[[2]]@Polygons[[1]]@coords)
View(combined_polygon)
ggplot(polygon_data, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
ggplot(combined_polygon, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
View(australia_all)
View(australia_all)
View(australia_map)
View(polygon_data)
polygon_data <- data.frame(x = numeric(0), y = numeric(0))
# Iterate over the polygons and append their coordinates to the data frame
for (i in 1:4) {
polygon_coords <- australia_polygon@polygons[[1]]@Polygons[[i]]@coords
polygon_data <- rbind(polygon_data, data.frame(x = polygon_coords[, 1], y = polygon_coords[, 2]))
}
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Iterate over the polygons and append their coordinates to the data frame
for (i in 1:4) {
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
polygon_data <- rbind(polygon_data, data.frame(x = polygon_coords[, 1], y = polygon_coords[, 2]))
}
# Create the map using ggplot2
ggplot(polygon_data, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
# check if points fall within australia_polygon
within_polygon1 <- sapply(1:nrow(points), function(i) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2])
})
# load libraries
library(sp)
library(maps)
library(maptools)
# generate australia map from maps package
australia_map <- map("world", "Australia", fill = TRUE, plot = FALSE)
#convert to polygon using maptools package
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names, proj4string = CRS("+proj=longlat +datum=WGS84"))
# define points
points <- data.frame(x = c(151, 150, 100), y = c(-33, 125, -20))
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})
within_polygon
within_polygon
# Create a logical vector to store the results for each point
within_polygon <- logical(nrow(points))
# Iterate over each polygon
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})
within_polygon
# Create a logical vector to store the results for each point
within_polygon <- logical(nrow(points))
# Iterate over each polygon
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})
within_polygon
# define points
points <- data.frame(x = c(151, 150, 100), y = c(-33, 125, -20))
# Create a logical vector to store the results for each point
within_polygon <- logical(nrow(points))
# Iterate over each polygon
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})
within_polygon
# generate australia map from maps package
australia_map <- map("world", "Australia", fill = TRUE, plot = FALSE)
#convert to polygon using maptools package
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names, proj4string = CRS("+proj=longlat +datum=WGS84"))
# define points
points <- data.frame(x = c(151, 150, 100), y = c(-33, 125, -20))
# Create a logical vector to store the results for each point
within_polygon <- logical(nrow(points))
# Iterate over each polygon
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})
within_polygon
# load libraries
library(sp)
library(maps)
library(maptools)
# generate australia map from maps package
australia_map <- map("world", "Australia", fill = TRUE, plot = FALSE)
#convert to polygon using maptools package
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names, proj4string = CRS("+proj=longlat +datum=WGS84"))
# check if points fall within australia_polygon - only polygon 1
within_polygon <- sapply(1:nrow(points), function(i) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2])
})
within_polygon
# generate australia map from maps package
australia_map <- map("world", "Australia", fill = TRUE, plot = FALSE)
#convert to polygon using maptools package
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names, proj4string = CRS("+proj=longlat +datum=WGS84"))
# define points
points <- data.frame(x = c(151, 150, 100), y = c(-33, 125, -20))
# Create a logical vector to store the results for each point
within_polygon <- logical(nrow(points))
# Iterate over each polygon
# Iterate over each polygon
for (i in 1:length(polygons)) {
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})
within_polygon
within_polygon
within_polygon
# Check if points fall within australia_polygon for each polygon
within_polygon <- sapply(1:nrow(points), function(i) {
sapply(1:length(australia_polygon@polygons), function(j) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,2])
})
})
within_polygon
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,2])
within_polygon <- sapply(1:nrow(points), function(i) {
sapply(1:length(australia_polygon@polygons), function(j) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,2])
})
})
within_polygon <- sapply(1:nrow(points), function(i) {
sapply(1:length(australia_polygon@polygons), function(j) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,2])
})
})
within_polygon
# Check if points fall within australia_polygon for each polygon
within_polygon <- sapply(1:nrow(points), function(i) {
sapply(1:length(australia_polygon@polygons), function(j) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,2])
})
})
within_polygon
# Iterate over each polygon
for (i in 1:length(polygons)) {
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})
within_polygon
# load libraries
library(sp)
library(maps)
library(maptools)
# generate australia map from maps package
australia_map <- map("world", "Australia", fill = TRUE, plot = FALSE)
#convert to polygon using maptools package
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names, proj4string = CRS("+proj=longlat +datum=WGS84"))
# create points df
points <- data.frame(x = c(151, 150, 100), y = c(-33, 125, -20))
# check if points fall within australia_polygon - only polygon 1
within_polygon <- sapply(1:nrow(points), function(i) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2])
})
within_polygon
# define points
points <- data.frame(x = c(151, 150, 100), y = c(-33, 125, -20))
# Create a logical vector to store the results for each point
within_polygon <- logical(nrow(points))
# Iterate over each polygon
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})
# Iterate over each polygon
for (i in 1:length(polygons)) {
# Check if points fall within australia_polygon for each polygon
within_polygon <- sapply(1:nrow(points), function(i) {
sapply(1:length(australia_polygon@polygons), function(j) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,2])
})
})
within_polygon
# Check if points fall within australia_polygon for each polygon
within_polygon <- sapply(1:nrow(points), function(i) {
sapply(1:length(australia_polygon@polygons), function(j) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[j]]@Polygons[[1]]@coords[,2])
})
})
within_polygon
# Create an empty data frame to store the polygon data
polygon_data <- data.frame(x = numeric(0), y = numeric(0))
# Iterate over the polygons and append their coordinates to the data frame
for (i in 1:4) {
polygon_coords <- australia_polygon@polygons[[1]]@Polygons[[i]]@coords
polygon_data <- rbind(polygon_data, data.frame(x = polygon_coords[, 1], y = polygon_coords[, 2]))
}
# Create an empty data frame to store the polygon data
polygon_data <- data.frame(x = numeric(0), y = numeric(0))
# Iterate over the polygons and append their coordinates to the data frame
for (i in 1:43) {
polygon_coords <- australia_polygon@polygons[[1]]@Polygons[[i]]@coords
polygon_data <- rbind(polygon_data, data.frame(x = polygon_coords[, 1], y = polygon_coords[, 2]))
}
# Create the map using ggplot2
ggplot(polygon_data, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
# Create the map using ggplot2
ggplot(polygon_data, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
library(ggplot2)
# create df with the x and y coordinates of polygon
polygon_data <- data.frame(x = australia_polygon@polygons[[1]]@Polygons[[1]]@coords[, 1],
y = australia_polygon@polygons[[1]]@Polygons[[1]]@coords[, 2])
# map
ggplot(polygon_data, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
# install packages
install.packages("sp")
install.packages("sp")
install.packages("maps")
install.packages("maptools")
install.packages("maptools")
# load libraries
library(sp)
library(maps)
# generate australia map from maps package
australia_map <- map("world", "Australia", fill = TRUE, plot = FALSE)
#convert to polygon using maptools package
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names, proj4string = CRS("+proj=longlat +datum=WGS84"))
#convert to polygon using maptools package
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names, proj4string = CRS("+proj=longlat +datum=WGS84"))
library(maptools)
#convert to polygon using maptools package
australia_polygon <- map2SpatialPolygons(australia_map, IDs = australia_map$names, proj4string = CRS("+proj=longlat +datum=WGS84"))
# create points df
points <- data.frame(x = c(151, 150, 100), y = c(-33, 125, -20))
# check if points fall within australia_polygon - only polygon 1
within_polygon <- sapply(1:nrow(points), function(i) {
point.in.polygon(points$x[i], points$y[i], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,1], australia_polygon@polygons[[1]]@Polygons[[1]]@coords[,2])
})
within_polygon
library(ggplot2)
library(ggplot2)
# create df with the x and y coordinates of polygon
polygon_data <- data.frame(x = australia_polygon@polygons[[1]]@Polygons[[1]]@coords[, 1],
y = australia_polygon@polygons[[1]]@Polygons[[1]]@coords[, 2])
# map
ggplot(polygon_data, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
library(ggplot2)
# create df with the x and y coordinates of polygon 2
polygon_data <- data.frame(x = australia_polygon@polygons[[2]]@Polygons[[1]]@coords[, 1],
y = australia_polygon@polygons[[2]]@Polygons[[1]]@coords[, 2])
# map polygon 2
ggplot(polygon_data, aes(x = x, y = y)) +
geom_polygon() +
coord_equal() +
labs(x = "longitude", y = "latitude") +
theme_bw()
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})}
# Iterate over each polygon
for (i in 1:length(polygons)) {
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})}
within_polygon
# define points
points <- data.frame(x = c(151, 150, 100, 147), y = c(-33, 125, -20, -42))
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})}
# Iterate over each polygon
for (i in 1:length(polygons)) {
# Extract the coordinates of the current polygon
polygon_coords <- australia_polygon@polygons[[i]]@Polygons[[1]]@coords
# Check if each point is within the current polygon
within_polygon <- within_polygon | sapply(1:nrow(points), function(j) {
point.in.polygon(points$x[j], points$y[j], polygon_coords[,1], polygon_coords[,2])
})}
within_polygon
result |> head()
install.packages("galah")
library(galah)
library(galah)
install.packages("galah")
install.packages("galah")
library(galah)
library(galah)
library(galah)
install.packages("galah")
install.packages("galah")
library(galah)
install.packages("galah")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("AtlasOfLivingAustralia/galah")
genus_end <- read.csv("C:/Users/adele/Documents/BEES3041/endemism/endemismdata/australian_flora/genus_level_endemism_estimate.csv")
genus_end <- read.csv("C:/Users/adele/Documents/BEES3041/endemism/endemismdata/australian_flora/genus_level_endemism_estimate.csv")
genus_end <- read.csv("C:/Users/adele/Documents/BEES3041/endemism/endemismdata/australian_flora/genus_level_endemism_estimate.csv")
genus_end <- read.csv("C:/Users/adele/Documents/BEES3041/endemism/endemismdata/australian_flora/genus_level_endemism_estimate.csv")
setwd("C:/Users/adele/Documents/BEES3041/endemism/endemism")
genus_end <- read.csv("C:/Users/adele/Documents/BEES3041/endemism/endemismdata/australian_flora/genus_level_endemism_estimate.csv")
genus_end <- read.csv("C:/Users/adele/Documents/BEES3041/endemism/endemism/data/australian_flora/genus_level_endemism_estimate.csv")
genus_end <- read.csv("data/australian_flora/genus_level_endemism_estimate.csv")
genus_end <- read.csv("data/australian_flora/genus_level_endemism_estimate.csv")
#read csvs
genus_end <- read.csv("data/australian_flora/genus_level_endemism_estimate.csv")
#read csvs
genus_end <- read.csv("data/australian_flora/genus_level_endemism_estimate.csv")
#read csvs
genus_end <- read.csv("data/australian_flora/genus_level_endemism_estimate.csv")
ng <- read.csv("data/other_countries_floras/sa2022")
#read csvs
genus_end <- read.csv("data/australian_flora/genus_level_endemism_estimate.csv")
ng <- read.csv("data/other_countries_floras/sa2022")
```{}
```{}
```{}
```{}
```
```{}
#read csvs
genus_end <- read.csv("data/australian_flora/genus_level_endemism_estimate.csv")
ng <- read.csv("data/other_countries_floras/sa_2022-07-12_072627325-BRAHMSOnlineData.csv")
?fread
?fread
install.packages("data.table")
library(data.table)
nz <- fread("data/other_countries_floras/checklistofthenewzealandflora-seedplantsseptember2020.tsv"")
nz <- fread("data/other_countries_floras/checklistofthenewzealandflora-seedplantsseptember2020.tsv")
nz <- fread("data/other_countries_floras/checklistofthenewzealandflora-seedplantsseptember2020.tsv")
nz2 <- fread("data/other_countries_floras/checklistofthenewzealandflora-fernsandlycophytesseptember2020.tsv)
nz2 <- fread("data/other_countries_floras/checklistofthenewzealandflora-fernsandlycophytesseptember2020.tsv")
nz2 <- fread("data/other_countries_floras/checklistofthenewzealandflora-fernsandlycophytesseptember2020.tsv")
View(nz2)
View(nz)
nc <- read.csv("data/Florical_vers_7_I_2022.csv")
nc <- read.csv("data/other_countries_floras/Florical_vers_7_I_2022.csv")
